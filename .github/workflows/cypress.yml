name: Cypress E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-allure
  cancel-in-progress: false

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          mkdir -p cypress/videos cypress/screenshots cypress/results

      - name: Verify TypeScript types
        run: npm run type-check

      - name: Run Cypress tests (headless)
        uses: cypress-io/github-action@v6
        with:
          # Record run to Cypress Cloud
          command: npx cypress run --browser chrome --record --tag ci --group github-run --ci-build-id ${{ github.run_id }}
          # For parallelization later (ensure >1 spec & multiple runners):
          # command: npx cypress run --browser chrome --record --parallel --tag ci --group github-shard --ci-build-id ${{ github.run_id }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: List JUnit results (debug)
        if: always()
        run: |
          echo "Listing cypress/results contents (if any)";
          ls -l cypress/results || echo "No results dir yet";
          echo "Listing videos directory";
          ls -l cypress/videos || echo "No videos dir";
          echo "Listing screenshots directory";
          ls -l cypress/screenshots || echo "No screenshots dir";
      - name: Install Datadog CLI (if not already)
        run: npm install --no-save @datadog/datadog-ci
      - name: Upload JUnit to Datadog CI Visibility
        if: always()
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_SITE: ${{ secrets.DATADOG_SITE }}
          DD_CIVISIBILITY_AGENTLESS_ENABLED: 1
          DD_SERVICE: cypress-e2e
          DD_ENV: ci
          DD_VERSION: ${{ github.sha }}
          DD_GIT_REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}
          DD_GIT_COMMIT_SHA: ${{ github.sha }}
          DD_GIT_BRANCH: ${{ github.ref_name }}
          DD_TAGS: team:qa,component:frontend,branch:${{ github.ref_name }},workflow:${{ github.workflow }}
        run: |
          if ls cypress/results/*.xml 1>/dev/null 2>&1; then
            npx datadog-ci junit upload --service $DD_SERVICE cypress/results/*.xml || echo "Datadog JUnit upload failed";
          elif npx @datadog/datadog-ci --version 1>/dev/null 2>&1; then
            npx @datadog/datadog-ci junit upload --service $DD_SERVICE cypress/results/*.xml || echo "Datadog JUnit upload (scoped) failed";
          else
            echo "No JUnit XML files to upload to Datadog";
          fi
      - name: Submit basic test metrics to Datadog
        if: always()
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_SITE: ${{ secrets.DATADOG_SITE }}
        run: |
          echo "Submitting aggregate test metrics via custom script";
          node scripts/datadog-metrics.js || echo "Custom Datadog metrics script failed"

      - name: Store videos and screenshots (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/videos/**
            cypress/screenshots/**
          if-no-files-found: ignore

      - name: Upload junit results (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-junit
          path: cypress/results/*.xml
          if-no-files-found: ignore
      - name: Generate Allure HTML report
        if: always()
        run: npx allure generate --clean allure-results -o allure-report || echo "Allure generate failed"
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/**
          if-no-files-found: ignore
      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/**
          if-no-files-found: ignore
      - name: Clean up Allure results before deployment
        run: |
          find ./allure-report -type f -size +100M -exec rm -f {} \;  # Remove large files over 100MB
      # 6. Deploy Allure Report to GitHub Pages
      - name: Upload Allure Pages artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

  deploy-pages:
    needs: cypress-run
    runs-on: ubuntu-latest
    if: needs.cypress-run.result == 'success'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.CYPRESS_AUTOMATION_EMAIL_USERNAME }}
          password: ${{ secrets.CYPRESS_AUTOMATION_PASSWORD }}
          subject: Cypress Test Automation Report
          body: |
              Hi, 
              Please find below the link for Cypress Test Automation Report

              https://anishbatra.github.io/cypress_datadog/

              Best Regards
                Anish
          to:  ${{ secrets.RECEPIENT_EMAIL }}
          from: ${{ secrets.CYPRESS_AUTOMATION_EMAIL_USERNAME }}
     
